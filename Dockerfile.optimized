# Stage 1: Chef - Prepare dependencies list
FROM rust:nightly AS chef
RUN cargo install cargo-chef
WORKDIR /app

# Stage 2: Planner - Generate recipe.json
FROM chef AS planner
# Copy all Cargo.toml files to capture workspace structure
COPY Cargo.toml Cargo.lock ./
COPY crates/microdata-extract/Cargo.toml crates/microdata-extract/
COPY plugins/rusty-beam-plugin-api/Cargo.toml plugins/rusty-beam-plugin-api/
COPY plugins/selector-handler/Cargo.toml plugins/selector-handler/
COPY plugins/file-handler/Cargo.toml plugins/file-handler/
COPY plugins/basic-auth/Cargo.toml plugins/basic-auth/
COPY plugins/authorization/Cargo.toml plugins/authorization/
COPY plugins/access-log/Cargo.toml plugins/access-log/
COPY plugins/compression/Cargo.toml plugins/compression/
COPY plugins/cors/Cargo.toml plugins/cors/
COPY plugins/error-handler/Cargo.toml plugins/error-handler/
COPY plugins/google-oauth2/Cargo.toml plugins/google-oauth2/
COPY plugins/health-check/Cargo.toml plugins/health-check/
COPY plugins/rate-limit/Cargo.toml plugins/rate-limit/
COPY plugins/redirect/Cargo.toml plugins/redirect/
COPY plugins/security-headers/Cargo.toml plugins/security-headers/
COPY plugins/websocket/Cargo.toml plugins/websocket/
COPY plugins/websocket-broadcast/Cargo.toml plugins/websocket-broadcast/
COPY plugins/directory/Cargo.toml plugins/directory/
COPY plugins/config-reload/Cargo.toml plugins/config-reload/

# Generate recipe for dependencies
RUN cargo chef prepare --recipe-path recipe.json

# Stage 3: Builder - Build dependencies (cached layer)
FROM chef AS builder
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy recipe and build dependencies (this layer is cached)
COPY --from=planner /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Copy all source code
COPY . .

# Build the application and all plugins (dependencies are already built)
RUN cargo build --release --workspace

# Copy plugin libraries to the expected location
RUN mkdir -p plugins && \
    for plugin in selector-handler file-handler basic-auth authorization access-log compression cors error-handler google-oauth2 health-check rate-limit redirect security-headers websocket directory config-reload; do \
        if [ "$plugin" = "directory" ]; then \
            cp target/release/lib${plugin}.so plugins/lib${plugin}.so || true; \
        else \
            cp target/release/librusty_beam_${plugin//-/_}.so plugins/librusty_beam_${plugin//-/_}.so || true; \
        fi; \
    done && \
    cp plugins/librusty_beam_file_handler.so plugins/librusty_beam_file_handler_v2.so || true

# Stage 4: Runtime
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 rustybeam

# Create necessary directories
RUN mkdir -p /app/plugins /app/docs

# Copy the binary from builder
COPY --from=builder /app/target/release/rusty-beam /app/rusty-beam

# Copy plugins
COPY --from=builder /app/plugins/*.so /app/plugins/

# Copy the docs directory (which serves as the web root)
COPY --from=builder /app/docs /app/docs

# Copy the entrypoint script
COPY docker-entrypoint.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

# Set ownership
RUN chown -R rustybeam:rustybeam /app

# Switch to non-root user
USER rustybeam

# Set working directory
WORKDIR /app

# Expose the default port
EXPOSE 3000

# Use the entrypoint script
ENTRYPOINT ["/app/docker-entrypoint.sh"]